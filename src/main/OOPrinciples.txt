1. Encapsulate what varies.
2. Favor composition over inheritance.
3. Program to interface, not implementations.
4. Strive for loosely coupled designs between objects that interact.
5. Depend upon abstractions. Do not depend upon concrete classes.
6. No variable should hold a reference to a concrete class.
       If you use new, you’ll be holding a reference to a concrete class. Use a factory to get around that!
7. No class should derive from a concrete class.
       If you derive from a concrete class, you're depending on a concrete class. Derive from an abstraction, like an interface or an abstract class.
8. No method should override an implemented method of any of its base classes.
       If you override an implemented method, then your base class wasn't really an abstraction to start with.
       Those methods implemented in the base class are meant to be shared by all your subclasses.
9. Principle of Least Knowledge: talk only to your immediate friends.
    It means when you are designing a system, for any object,
    be careful of the number of classes it interacts with and also how it comes to interact with those classes.
10. Don't call us, we’ll call you.
    Gives us a way to prevent "dependency rot."
    Dependency rot happens when you have high-level components depending on low-level components depending on high-level components depending on
    sideways components depending on low-level components, and so on. When rot sets in, no one can easily understand the way a system is designed.
    We allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how.
    In other words, the high-level components give the low-level components a "don’t call us, we’ll call you" treatment.
11. A class should have only one reason to change.
    Every responsibility of a class is an area of potential change.
    More than one responsibility means more than one area of change.
    This principle guides us to keep each class to a single responsibility.